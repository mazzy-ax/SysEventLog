Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: JOB

; Microsoft Dynamics Job: SysEventLog_Demo unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #SysEventLog_Demo
    #static void SysEventLog_Demo(Args _args)
    #{;
    #    SysEventLog::info('SysEventLog demo message.');
    #}
  ENDSOURCE

***Element: FTM

; Microsoft Dynamics MENUITEM : SysEventLog_DemoOnServer unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #SysEventLog_DemoOnServer
    Type: 3
    PROPERTIES
      Name                #SysEventLog_DemoOnServer
      ObjectType          #Job
      Object              #SysEventLog_Demo
      RunOn               #Server
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: CLS

; Microsoft Dynamics Class: SysEventLog unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEventLog
    PROPERTIES
      Name                #SysEventLog
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysEventLog
        #//
        #//
        #// Класс-обертка вокруг System.Diagnostics.EventLog.WriteEntry
        #// https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.eventlog.writeentry
        #// позволяет записывать в Windows Event Log
        #//
        #class SysEventLog
        #{
        #}
      ENDSOURCE
      SOURCE #compName
        #protected static str compName()
        #{
        #    Session session = new Session();
        #
        #    if( session.objectOnServer() )
        #        return session.AOSName();
        #
        #    return session.clientComputerName();
        #}
      ENDSOURCE
      SOURCE #entryType
        #protected static System.Diagnostics.EventLogEntryType entryType(Exception exception = Exception::Info)
        #{
        #    System.Diagnostics.EventLogEntryType eventLogEntryType;
        #
        #    switch(exception)
        #    {
        #        case Exception::Info:
        #            eventLogEntryType = CLRInterop::parseClrEnum('System.Diagnostics.EventLogEntryType', 'Information');
        #            break;
        #
        #        case Exception::Warning:
        #            eventLogEntryType = CLRInterop::parseClrEnum('System.Diagnostics.EventLogEntryType', 'Warning');
        #            break;
        #
        #        default:
        #            eventLogEntryType = CLRInterop::parseClrEnum('System.Diagnostics.EventLogEntryType', 'Error');
        #    }
        #
        #    return eventLogEntryType;
        #}
      ENDSOURCE
      SOURCE #error
        #public static void error(str event, int eventId = 0)
        #{;
        #    SysEventLog::write(event, Exception::Error, eventId);
        #}
      ENDSOURCE
      SOURCE #getAOSInstance
        #// скопировано из ax2009
        #protected static server str getAOSInstance()
        #{
        #    SysClientSessions clientSessions;
        #    SysServerSessions serverSessions;
        #    xSession currentSession = new xSession();
        #    SkipAOSValidationPermission skipAOS;
        #    ;
        #
        #    skipAOS = new SkipAOSValidationPermission();
        #    skipAOS.assert();
        #
        #    //BP deviation documented
        #    clientSessions.skipAosValidation(true);
        #
        #    //BP deviation documented
        #    serverSessions.skipAosValidation(true);
        #
        #    // Get the instance name of server session currently connected to.
        #    select Instance_Name from serverSessions
        #        exists join clientSessions where clientSessions.ServerId == serverSessions.ServerId
        #        && clientSessions.SessionId == currentSession.sessionId();
        #
        #
        #    return serverSessions.Instance_Name;
        #}
      ENDSOURCE
      SOURCE #info
        #public static void info(str event, int eventId = 0)
        #{;
        #    SysEventLog::write(event, Exception::Info, eventId);
        #}
      ENDSOURCE
      SOURCE #messageHeader
        #protected static str messageHeader()
        #{
        #    Session session = new Session();
        #
        #    str ret = strfmt('User: %1, Company: %2, %3%4@%5, Session type: %6, Run on: %7 (%8.%9)\n----\n\n',
        #                    curUserId(), curExt(),
        #                    'AOS$', SysEventLog::getAOSInstance(), session.AOSName(), session.clientKind(),
        #                    SysEventLog::source(), xInfo::releaseVersion(), xInfo::buildNo());
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #source
        #// уникальный идентификатор источника для EventLog
        #// источники не могут повторяться даже в разных log-файлах
        #//
        #// эти источники были созданы инсталятором во время установки Аксапты
        #// поэтому использовать эти источники достаточно безопасно
        #// хоть по ним не очень удобно фильтовать и к ним не очень удобно аттачить задачи
        #protected static str source()
        #{
        #    boolean onServer    = new Object().objectOnServer();
        #    str     eventSource = onServer ? strfmt('Dynamics Server %1', SysEventLog::getAOSInstance()) : 'Dynamics Client';
        #
        #    return eventSource;
        #}
      ENDSOURCE
      SOURCE #warning
        #public static void warning(str event, int eventId = 0)
        #{;
        #    SysEventLog::write(event, Exception::Warning, eventId);
        #}
      ENDSOURCE
      SOURCE #write
        #// записывает строку в Windows Event Log
        #public static void write(
        #    str       eventMessage,
        #    Exception exception     = Exception::Info,
        #    int       eventId       = 0,
        #    str       eventSource   = '',
        #    str       eventLogFile  = '')
        #{
        #    str messageHeder = SysEventLog::messageHeader();
        #    str source       = eventSource ? eventSource : SysEventLog::source();
        #    str logFile      = eventLogFile ? eventLogFile : 'Application';
        #
        #    System.Diagnostics.EventLogEntryType eventLogEntryType;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    eventLogEntryType = SysEventLog::entryType(exception);
        #
        #    if( Session::isInRoleAdmin() )
        #    {
        #        // и проверка, и создание источника (source) требуют привилегий администратора
        #        if( !System.Diagnostics.EventLog::SourceExists(source) )
        #        {
        #            System.Diagnostics.EventLog::CreateEventSource(source, logFile);
        #            sleep(1000);    // после создания, источник доступен не сразу
        #        }
        #    }
        #
        #    /*
        #
        #    В следующей строке кода может произойти CLR-ошибка 'ClrObject static method invocation error',
        #    если текущая сессия стартовала без привилегий администратора
        #    и источник (source) для метода System.Diagnostics.EventLog::WriteEntry не зарегистрирован в реестре.
        #
        #    Причины, по которым не делается никаких попыток замаскировать или перехватить ошибку:
        #
        #    1. в аксапте в случае ошибки внутри транзакции оператор try/catch пропустит все catch внутри транзакции.
        #       данный метод записи в EventLog с огромной вероятностью будет вызван именно внутри транзакции.
        #       поэтому try/catch в этом методе ничего не гарантирует.
        #
        #    2. source может быть зарегистрирован на компьютере между любыми двумя вызовами данного метода,
        #       а проверка на существование источника требует прав локального администратора.
        #       поэтому, не имея прав локального администратора, приходится делать "прыжок веры",
        #       полагаясь на то, что источник существует.
        #
        #    3. ошибка в следующей строке достаточно специфична и хорошо заметна даже рядовыми пользователями.
        #       поэтому эту ошибку быстро доведут до сведения разработчика, который легко сможет найти источник ошибки в этом методе.
        #       а в этом методе добравшегося ждут эти комментарии. welcome!
        #
        #    */
        #
        #    System.Diagnostics.EventLog::WriteEntry(source, messageHeder + eventMessage, eventLogEntryType, eventId);
        #
        #    /*
        #
        #    На компьютере, где предыдущая строка выдала ошибку,
        #    нужно хотя бы один раз выполнить с привилегиями администратора (runAsAdministrator):
        #
        #    либо Job в AOT (https://github.com/mazzy-ax/SysEventLog/blob/main/ax2009/Examples/Job_SysEventLog_Demo.xpp)
        #
        #        SysEventLog_Demo(args)
        #
        #    либо команду PowerShell
        #
        #        PS> [System.Diagnostics.EventLog]::CreateEventSource('%source%', 'Application')
        #
        #    либо команду в CMD
        #
        #        c:\> eventcreate /ID 1 /T INFORMATION /SO "%source%" /L "Application" /D log-created
        #
        #    Ключевое требование: с привилегиями администратора!
        #
        #    Список зарегистрированных источников можно посмотреть в реестре по адресу:
        #    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog\Application
        #
        #    */
        #}
      ENDSOURCE
      SOURCE #writeOnServer
        #// записывает строку в Windows Event Log
        #// всегда выполняется на сервере
        #//
        #public server static void writeOnServer(
        #    str       eventMessage,
        #    Exception exception     = Exception::Info,
        #    int       eventId       = 0,
        #    str       eventSource   = '',
        #    str       eventLogFile  = '')
        #{;
        #    SysEventLog::write(eventMessage, exception, eventId, eventSource, eventLogFile);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics Project : SysEventLog unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #SysEventLog
   SHARED
  PROPERTIES
    Name                #SysEventLog
  ENDPROPERTIES
  
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #SysEventLog_Demo
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 3
      UTILOBJECTID 0
      NODETYPE 296
      NAME #SysEventLog_DemoOnServer
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50012
      NODETYPE 329
      NAME #SysEventLog
    ENDNODE
  ENDPROJECT
  

***Element: END
